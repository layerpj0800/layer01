서비스 설계 Basic

1. 서비스 개요

목표: 창작자(호스트)가 개설한 전용 채널에서 구독자에게 일방향으로 콘텐츠/메시지를 전달하고, 구독자는 유료 결제를 통해 접근할 수 있는 플랫폼.

핵심 차별점: 유튜브 프리미엄처럼 창작자별 구독 모델 + 텔레그램 채널처럼 일방향 콘텐츠 소비.

대상 사용자

호스트(창작자): 글, 이미지, 영상, 고정 메시지, 알림 발송

구독자: 채널 구독, 콘텐츠 열람, 알림 수신, 컬렉션 관리

2.기술스택 

프론트엔드

Next.js (React 기반): SEO/SSR 지원, App Router 구조

상태 관리: React Query 

스타일링: TailwindCSS + shadcn/ui 

배포: Vercel (자동 배포/프리뷰)

백엔드

FastAPI (Python): 경량/빠른 API 서버

DB: PostgreSQL

ORM: SQLAlchemy + Alembic

인증: JWT (웹=HttpOnly 쿠키, 앱=SecureStorage)

비동기 처리: Celery/RQ + Redis (이메일, 푸시, 결제 검증)

배포: Railway


미디어/인프라

스토리지: S3/R2 (이미지/영상 저장)

영상 스트리밍: Cloudflare Stream or AWS Elastic Transcoder (HLS 변환)

알림: Firebase Cloud Messaging(Web/App), 이메일(SendGrid/Resend)

결제: 아임포트(국내 PG 통합)



3. 페이지 구성 관점

공개 영역

홈: 인기 채널 추천

채널 리스트: 카테고리/검색/추천 정렬

채널 상세 (구독 전): 채널 정보, 구독 플랜 안내, 결제 버튼


가입/인증

회원가입: 이메일/소셜 로그인

로그인: JWT 쿠키 기반 세션


구독자 전용

채널 피드: 게시글/영상/공지 순서대로

게시글 상세: 텍스트/이미지/영상 뷰어, 고정 메시지 표시

채팅 뷰: 호스트 메시지 스트림(SSE/WebSocket)


사용자 대시보드

내 구독: 현재 구독 중인 채널, 결제 내역, 다음 결제일

컬렉션 관리: 채널을 폴더 단위로 분류

알림 설정: 푸시/이메일 구독 여부



호스트(크리에이터) 대시보드

채널 관리: 제목, 설명, 플랜, 가격 설정

게시글 작성/편집: 텍스트/이미지/영상 업로드

구독자 통계: 구독자 수, 결제 현황, 정산 리포트



관리자 페이지 (운영)

신고 처리: 불법/금칙 콘텐츠 대응

구독/결제 관리: 환불/차지백 기록 확인

채널 강제 차단/해지



서비스 설계 Detail

1) 구독/결제 정책(호스트별 과금의 기준)


과금 주기: 월 단위 고정 

무료 체험: 호스트가 무료 공개한 콘텐츠 일부만

해지 시 권한: 즉시 박탈

가격 변경: 기존 구독자 grandfathering 가능. 

지역/통화: KRW 고정



정기결제 실패 재시도 규칙 D+3

환불/차지백 처리 플로우(일단 기본 플로우는 결제 이후 컨텐츠 1건이라도 조회시 환불불가 )

영수증/세금계산서(크리에이터·플랫폼 정산 기준)



2) 권한 모델 & 액세스 매트릭스(역할/리소스별 허용행위)

RBAC(역할 기반 접근 제어)



사이트 관리자 (전체 서비스 통제) : 

전체 신고 내역 확인 / 처리

유저 정지 / IP 차단 / 이메일 블랙리스트

전체 금칙어 사전 관리

자동 차단 로그 모니터링 (Bot 감지 로그)

위험 행동 로그 검색 (ex: 로그인 실패 50회 등)



호스트 : 채팅 삭제 , 채팅 게시, 구독 맴버 관리, 맴버 블락 관리, 게시글 등록,삭제,수정 , 채널 소유 , 채널관리 , 
코호스트 권한 범위: 채널 관리, 채널 소유, 게시물 관련 외 코호스트의 모든 권한  

구독자 권한: 읽기 전용 + 좋아요 및 댓글 가능 

액세스 매트릭스 - Roles,Permission,User파일 참고


3) 콘텐츠 정책(타입/사이즈/수명)

게시글 (동영상 컨텐츠)

사이즈 1280x720이 웹사이트 기본 화질 설정으로 셋팅칸에서가능 
업로드 시간 제한 30분 
업로드 최대 파일 크기 5GB
업로드 한도: 트래픽 상한
월 15GB 초과 시 제한 + 이메일을 보내달라는 팝업. 

수명 정책: 고정 보관

미디어 저장소: AWS S3 저렴한 오브젝트 스토리지+ 서명 URL(만료 5–15분)로 접근 제어


4)동영상 컨텐츠 처리흐름 

[사용자 영상 업로드]
        ↓
[큐 시스템에 요청 저장]
        ↓
[작업자 워커가 큐에서 꺼냄 → 트랜스코딩 + 썸네일 생성]
        ↓
[결과물 저장 (원본/가공본/썸네일 각각)]
        ↓
[가공본/썸네일 → CDN에 등록]
        ↓
[처리 완료 or 실패 로그 남김]



5) 채팅 채널 아키텍처(일방향 방송형)


전송 방식: WebSocket(확장/양방향 옵션)

메시지 타입: 텍스트/이미지/링크/첨부

고정 메시지(pinned), 읽음 기준, 메시지 ID 정렬 정책

운영 가이드

메시지 보존/아카이브



6) 정보구조(폴더·컬렉션·구독 관리)



대시보드: 최근 업데이트, 미열람 수, 즐겨찾기 고정

검색/필터: 호스트명, 태그, 최신순/인기순


7) 데이터 모델 최소셋


users(id, email, password_hash, role)

creators(id, user_id, profile, payout_account)

channels(id, creator_id, title, is_private)

plans(id, channel_id, price, interval, trial_days)

subscriptions(id, user_id, plan_id, status, current_period_end)

posts(id, channel_id, type[text|image|video], body, media_key, created_at)

chat_messages(id, channel_id, type, body, media_key, created_at)

payment_events(id, provider, type, payload_json, subscription_id, occurred_at)

collections(id, user_id, name) / collection_items(collection_id, channel_id)


인덱스/제약

구독 유효성 조회용 복합 인덱스(user_id, status, current_period_end


8) 비기능 요구사항(NFR) 기준

성능: 초기 목표 SLO p95 API 응답 < 300ms, 홈 로드 < 2s

확장성: 채팅 동시접속5k

가용성: 99.9% 목표 · 장애시 복구 RTO/RPO(백업/스냅샷)

보안: JWT HttpOnly 쿠키, 서명 URL, 웹훅 시크릿/서명 검증


10) 알림 정책

트리거: 새 게시물, 라이브 시작, 결제 상태 변경

채널: 웹푸시/이메일(구독자가 선택)

레이트리밋: 채널당 하루 1건, 배치 발송 윈도우



11) 로깅/모니터링/개인정보

로그: 감사 로그(삭제/권한변경/결제웹훅), 요청 ID 추적

PII 보호: 이메일/결제식별자 최소수집, 암호화 저장, 보존기간 정책

관리자 콘솔: 신고 처리, 구독 상태 강제 종료, 환불 메모 기록

12) 단계적 로드맵(MVP → v1 → v1.1)

MVP: 가입/로그인, 채널 구독(1개 플랜·월정액), 채팅 읽기, 게시글 열람, 결제 성공/실패 웹훅 반영

v1: 코호스트, 폴더(컬렉션), 영상 스트리밍(HLS), 웹푸시

v1.1: 무료 체험, 가격 변경 정책, 정산 리포트, 신고/차단

13) API 계약 & 에러 규격

버전: /api/v1 고정

응답: 성공/실패 통일 스키마(예: {data, error{code,message}})

에러 코드 맵: 인증(401), 권한(403), 구독만료(402-like), 한도초과(429)

14) 테스트/릴리스 기준

E2E 시나리오: “가입→구독→열람→해지→만료 후 접근불가” 자동화

릴리스 체크리스트: 마이그레이션, 피처플래그, 롤백 전략, 모니터링 알람


4. UX/UI 관점
UX 원칙

구독 흐름 단순화

“채널 상세 → 플랜 선택 → 결제 완료 → 바로 콘텐츠 열람”

가시적 권한 표시

구독 중/만료/결제 필요 여부를 버튼과 메시지로 직관적으로 안내

콘텐츠 소비 최적화

영상 스트리밍(버퍼링 최소화), 이미지 최적화, 텍스트 가독성 강조

알림 경험 최적화

과도한 푸시 방지, 유저가 직접 채널별 알림 On/Off 설정 가능

일관된 에러 처리

구독 만료 시 → “다음 결제일: YYYY-MM-DD, 지금 갱신하기” 버튼 제공

UI 디자인 가이드

레이아웃:

모바일 퍼스트, 상단 네비게이션 바 + 하단 탭 구조

반응형: Desktop=3열(채널목록/피드/상세), Mobile=1열

타이포그래피:

본문: sans-serif, 16px 이상

제목: 볼드, 대비 색상 사용

컬러 시스템:

Primary(브랜드 색상), Secondary(강조), Neutral(배경/텍스트)

상태 표현:

로딩 스켈레톤, 빈 상태 일러스트, 접근제한(잠금 아이콘)

컴포넌트 기본 세트:

버튼(Primary/Secondary/Disabled)

카드(채널, 게시글)

리스트(구독 채널, 컬렉션)

모달(결제 확인, 구독 해지)


